/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        Queue queue = new LinkedList();
        if(root ==null) return null;
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode n =(TreeNode)queue.poll();
            if(n.right!=null){
                queue.add(n.right);
            }
            if(n.left!=null){
                queue.add(n.left);
            }
            TreeNode temp = n.right;
            n.right = n.left;
            n.left = temp;
        }
         return root;
    }
   
}
